import asyncio
from concurrent.futures import ThreadPoolExecutor
from telebot.async_telebot import AsyncTeleBot
import aiohttp
from urllib.parse import urlparse, quote
import json
import logging
from collections import deque
import time
import re
import qrcode
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

# Logging configuration
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Bot and API configuration
BOT_TOKEN = "7431028632:AAEaOuGT17MZl2GBKGzfx3uwVOLxZQXu0G0"
GEMINI_API_KEY = "AIzaSyD8Zc-j7kc_FkSF_WXQdxQpc4bGBD5KElU"
API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent"

bot = AsyncTeleBot(BOT_TOKEN)
executor = ThreadPoolExecutor(max_workers=50)

class MemoryHandler:
    def __init__(self, user_id):
        self.user_id = user_id
        self.file_path = f"memory_{user_id}.json"
        self.short_term_memory = deque(maxlen=5)
        self.long_term_memory = deque(maxlen=50)
        self.load_memory()

    def load_memory(self):
        if os.path.exists(self.file_path):
            with open(self.file_path, 'r') as file:
                data = json.load(file)
                self.short_term_memory = deque(data.get('short_term', []), maxlen=5)
                self.long_term_memory = deque(data.get('long_term', []), maxlen=50)

    def save_memory(self):
        data = {
            'short_term': list(self.short_term_memory),
            'long_term': list(self.long_term_memory)
        }
        with open(self.file_path, 'w') as file:
            json.dump(data, file)

    def get_context(self):
        return list(self.short_term_memory) + list(self.long_term_memory)

    def update_memory(self, message, response):
        self.short_term_memory.append({"role": "user", "content": message})
        self.short_term_memory.append({"role": "assistant", "content": response})
        self.long_term_memory.append({"role": "user", "content": message})
        self.long_term_memory.append({"role": "assistant", "content": response})
        self.save_memory()

    def clear_memory(self):
        self.short_term_memory.clear()
        self.long_term_memory.clear()
        self.save_memory()

def get_memory_handler(user_id):
    return MemoryHandler(user_id)

async def generate_response(prompt, user_id, session):
    max_retries = 3
    retry_delay = 5
    memory_handler = get_memory_handler(user_id)
    context = memory_handler.get_context()

    # Prompt engineering
    system_prompt = "B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh tr√™n Telegram ƒë∆∞·ª£c tanbaycu l·∫≠p tr√¨nh v√† ƒëi·ªÅu h√†nh. S·ª≠ d·ª•ng Markdown v√† th√™m emoji ph√π h·ª£p v√† ƒëa d·∫°ng. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, tr√°nh tr·∫£ l·ªùi gi·ªëng nhau c·∫ßn t·∫°o ra s·ª± ƒëa d·∫°ng trong ph·∫£n h·ªìi th√¥ng minh, h√£y l√†m cho cu·ªôc tr√≤ chuy·ªán tr·ªü n√™n sinh ƒë·ªông h·∫•p d·∫´n, ch√≠nh x√°c. N√™u √Ω ch√≠nh b·∫±ng c√°ch l√†m n·ªïi b·∫≠t n√≥, gi·∫£i th√≠ch ng·∫Øn g·ªçn n·∫øu c·∫ßn. Th√¢n thi·ªán, chuy√™n nghi·ªáp. Tr√°nh k√Ω t·ª± ƒë·∫∑c bi·ªát. Lu√¥n t·∫°o c√¢u tr·∫£ l·ªùi ƒë·ªôc ƒë√°o cho m·ªói c√¢u h·ªèi, k·ªÉ c·∫£ khi c√¢u h·ªèi t∆∞∆°ng t·ª±. Thay ƒë·ªïi c√°ch di·ªÖn ƒë·∫°t, c·∫•u tr√∫c c√¢u v√† t·ª´ ng·ªØ trong m·ªói l·∫ßn tr·∫£ l·ªùi. Cung c·∫•p th√¥ng tin m·ªõi ho·∫∑c g√≥c nh√¨n kh√°c n·∫øu c√¢u h·ªèi t∆∞∆°ng t·ª±. S·ª≠ d·ª•ng v√≠ d·ª•, so s√°nh ho·∫∑c c√¢u chuy·ªán ng·∫Øn ƒë·ªÉ minh h·ªça √Ω t∆∞·ªüng kh√°c bi·ªát. Thay ƒë·ªïi gi·ªçng ƒëi·ªáu v√† phong c√°ch vi·∫øt ƒë·ªÉ t·∫°o s·ª± ƒëa d·∫°ng. ƒê·∫∑t c√¢u h·ªèi ph·∫£n x·∫° khi th√≠ch h·ª£p ƒë·ªÉ khuy·∫øn kh√≠ch suy nghƒ© s√¢u h∆°n."
    enhanced_prompt = f"{system_prompt}\n\nUser: {prompt}\n\nAssistant:"

    for attempt in range(max_retries):
        try:
            url = f"{API_URL}?key={GEMINI_API_KEY}"
            headers = {"Content-Type": "application/json"}

            data = {
                "contents": [
                    {
                        "parts": [{"text": msg["content"]} for msg in context] + [{"text": enhanced_prompt}]
                    }
                ],
                "generationConfig": {
                    "temperature": 1,
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 4096,
                }
            }

            async with session.post(url, headers=headers, json=data, timeout=30) as response:
                response.raise_for_status()
                result = await response.json()

            if 'candidates' in result and result['candidates']:
                text_response = result['candidates'][0]['content']['parts'][0]['text']
            else:
                raise ValueError("No valid response from Gemini API")

            memory_handler.update_memory(prompt, text_response)
            return text_response

        except asyncio.TimeoutError:
            logger.warning(f"Timeout on attempt {attempt + 1}")
            if attempt < max_retries - 1:
                await asyncio.sleep(retry_delay)
                continue
            return "Y√™u c·∫ßu ƒë√£ h·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i sau."

        except aiohttp.ClientError as e:
            logger.error(f"Request error on attempt {attempt + 1}: {str(e)}")
            if attempt < max_retries - 1:
                await asyncio.sleep(retry_delay)
                continue
            return f"L·ªói k·∫øt n·ªëi: {str(e)}"

        except Exception as e:
            logger.error(f"Unexpected error on attempt {attempt + 1}: {str(e)}")
            return f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói kh√¥ng mong ƒë·ª£i: {str(e)}"

    return "Kh√¥ng th·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi sau nhi·ªÅu l·∫ßn th·ª≠. Vui l√≤ng th·ª≠ l·∫°i sau."

def create_qr_code(data):
    try:
        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
        qr.add_data(data)
        qr.make(fit=True)

        img = qr.make_image(fill_color="black", back_color="white")
        img_path = "qrcode.png"
        img.save(img_path)

        return img_path
    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o QR code: {str(e)}")
        return None

async def shorten_url(long_url, session):
    try:
        api_url = f"http://tinyurl.com/api-create.php?url={long_url}"
        async with session.get(api_url) as response:
            response.raise_for_status()
            return await response.text()
    except Exception as e:
        logger.error(f"L·ªói khi r√∫t g·ªçn URL: {str(e)}")
        return None

@bot.message_handler(commands=['start'])
async def send_welcome(message):
    user_first_name = message.from_user.first_name
    current_hour = time.localtime().tm_hour

    if 5 <= current_hour < 12:
        greeting = f"üåÖ *Ch√†o bu·ªïi s√°ng, {user_first_name}!*"
    elif 12 <= current_hour < 18:
        greeting = f"‚òÄÔ∏è *Ch√†o bu·ªïi chi·ªÅu, {user_first_name}!*"
    else:
        greeting = f"üåô *Ch√†o bu·ªïi t·ªëi, {user_first_name}!*"

    welcome_message = f"{greeting}\n\n"
    welcome_message += "T√¥i l√† tr·ª£ l√Ω AI th√¥ng minh, s·ª≠ d·ª•ng m√¥ h√¨nh Gemini 2.0 v·ªõi kh·∫£ nƒÉng ghi nh·ªõ ng·∫Øn h·∫°n v√† d√†i h·∫°n. "
    welcome_message += "H√£y ƒë·∫∑t c√¢u h·ªèi ho·∫∑c chia s·∫ª ch·ªß ƒë·ªÅ b·∫°n mu·ªën th·∫£o lu·∫≠n nh√©!\n\n"
    welcome_message += "üîç *M·ªôt s·ªë t√≠nh nƒÉng c·ªßa t√¥i:*\n"
    welcome_message += "‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi v√† cung c·∫•p th√¥ng tin\n"
    welcome_message += "‚Ä¢ T·∫°o m√£ QR (`/qrcode`)\n"
    welcome_message += "‚Ä¢ R√∫t g·ªçn URL (`/short`)\n"
    welcome_message += "‚Ä¢ V√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c!\n\n"
    welcome_message += "G√µ `/info` ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ t√¥i nh√©!"

    await bot.reply_to(message, welcome_message, parse_mode='Markdown')

@bot.message_handler(commands=['qrcode'])
async def handle_qrcode(message):
    try:
        data = message.text[len('/qrcode '):]
        if not data:
            await bot.reply_to(message, "Vui l√≤ng cung c·∫•p d·ªØ li·ªáu ƒë·ªÉ t·∫°o QR code.")
            return

        img_path = create_qr_code(data)
        if img_path:
            with open(img_path, 'rb') as img_file:
                await bot.send_photo(message.chat.id, img_file)
        else:
            await bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói khi t·∫°o QR code.")
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω l·ªánh qrcode: {str(e)}")
        await bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh qrcode.")

@bot.message_handler(commands=['short'])
async def handle_short(message):
    try:
        long_url = message.text[len('/short '):]
        if not long_url:
            await bot.reply_to(message, "Vui l√≤ng cung c·∫•p URL ƒë·ªÉ r√∫t g·ªçn.")
            return

        async with aiohttp.ClientSession() as session:
            short_url = await shorten_url(long_url, session)
        if short_url:
            await bot.reply_to(message, f"URL r√∫t g·ªçn: {short_url}")
        else:
            await bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói khi r√∫t g·ªçn URL.")
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω l·ªánh short: {str(e)}")
        await bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh short.")

@bot.message_handler(func=lambda message: not message.text.startswith('/'))
async def handle_message(message):
    async def process_and_send_response():
        try:
            thinking_message = await bot.reply_to(message, "ü§î Bot ƒëang suy nghƒ©...")

            start_time = time.time()
            async with aiohttp.ClientSession() as session:
                response = await generate_response(message.text, message.from_user.id, session)
            end_time = time.time()
            processing_time = end_time - start_time

            full_response = f"({processing_time:.2f}s) - {response}"

            max_length = 4096
            if len(full_response) > max_length:
                chunks = [full_response[i:i+max_length] for i in range(0, len(full_response), max_length)]
                for i, chunk in enumerate(chunks):
                    try:
                        if i == 0:
                            await bot.edit_message_text(
                                chat_id=thinking_message.chat.id,
                                message_id=thinking_message.message_id,
                                text=chunk,
                                parse_mode='Markdown'
                            )
                        else:
                            await bot.send_message(
                                chat_id=thinking_message.chat.id,
                                text=chunk,
                                parse_mode='Markdown'
                            )
                    except Exception as e:
                        logger.error(f"Telegram API error when sending chunk {i+1}: {str(e)}")
                        if "can't parse entities" in str(e):
                            if i == 0:
                                await bot.edit_message_text(
                                    chat_id=thinking_message.chat.id,
                                    message_id=thinking_message.message_id,
                                    text=chunk
                                )
                            else:
                                await bot.send_message(
                                    chat_id=thinking_message.chat.id,
                                    text=chunk
                                )
            else:
                try:
                    await bot.edit_message_text(
                        chat_id=thinking_message.chat.id,
                        message_id=thinking_message.message_id,
                        text=full_response,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"Telegram API error when sending full response: {str(e)}")
                    if "can't parse entities" in str(e):
                        await bot.edit_message_text(
                            chat_id=thinking_message.chat.id,
                            message_id=thinking_message.message_id,
                            text=full_response
                        )

            logger.info(f"ƒê√£ tr·∫£ l·ªùi tin nh·∫Øn cho user {message.from_user.id}")
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: {str(e)}")
            error_message = "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
            try:
                await bot.edit_message_text(
                    chat_id=thinking_message.chat.id,
                    message_id=thinking_message.message_id,
                    text=error_message
                )
            except:
                await bot.send_message(
                    chat_id=thinking_message.chat.id,
                    text=error_message
                )

    asyncio.create_task(process_and_send_response())

def is_valid_url(url):
    if url.startswith('mailto:'):
        # Simple check for email format
        email = url[7:]  # Remove 'mailto:' prefix
        return re.match(r"[^@]+@[^@]+\.[^@]+", email) is not None
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False

def create_button(text, url):
    if not is_valid_url(url):
        logger.warning(f"Invalid URL for button {text}: {url}")
        return None
    if url.startswith('mailto:'):
        # Don't encode mailto URLs
        return InlineKeyboardButton(text, url=url)
    encoded_url = quote(url, safe=':/?#@!$&()*+,;=')
    return InlineKeyboardButton(text, url=encoded_url)

@bot.message_handler(commands=['info'])
async def send_info(message):
    info_text = (
        "ü§ñ *Xin ch√†o! T√¥i l√† AI Assistant c·ªßa b·∫°n* ü§ñ\n\n"
        "T√¥i ƒë∆∞·ª£c ph√°t tri·ªÉn d·ª±a tr√™n m√¥ h√¨nh Gemini Pro, v·ªõi kh·∫£ nƒÉng t·∫°o ra c√°c c√¢u tr·∫£ l·ªùi th√¥ng minh v√† linh ho·∫°t. "
        "H√£y ƒë·ªÉ t√¥i h·ªó tr·ª£ b·∫°n trong nhi·ªÅu lƒ©nh v·ª±c kh√°c nhau!\n\n"
        "üåü *C√°c t√≠nh nƒÉng n·ªïi b·∫≠t:*\n"
        "‚Ä¢ üí¨ Tr√≤ chuy·ªán v√† tr·∫£ l·ªùi c√¢u h·ªèi\n"
        "‚Ä¢ üìö Cung c·∫•p th√¥ng tin ƒëa d·∫°ng\n"
        "‚Ä¢ üîç H·ªó tr·ª£ nghi√™n c·ª©u v√† h·ªçc t·∫≠p\n"
        "‚Ä¢ üé® G·ª£i √Ω √Ω t∆∞·ªüng s√°ng t·∫°o\n"
        "‚Ä¢ üìä Ph√¢n t√≠ch d·ªØ li·ªáu ƒë∆°n gi·∫£n\n\n"
        "üõ† *C√¥ng c·ª• h·ªØu √≠ch:*\n"
        "‚Ä¢ `/qrcode <n·ªôi dung>`: T·∫°o m√£ QR\n"
        "‚Ä¢ `/short <URL>`: R√∫t g·ªçn ƒë∆∞·ªùng link\n"
        "‚Ä¢ `/clear`: X√≥a b·ªô nh·ªõ cu·ªôc tr√≤ chuy·ªán\n\n"
        "üí° *M·∫πo s·ª≠ d·ª•ng:*\n"
        "1. ƒê·∫∑t c√¢u h·ªèi r√µ r√†ng v√† c·ª• th·ªÉ\n"
        "2. Cung c·∫•p ng·ªØ c·∫£nh n·∫øu c·∫ßn thi·∫øt\n"
        "3. S·ª≠ d·ª•ng c√°c l·ªánh ƒë·ªÉ truy c·∫≠p t√≠nh nƒÉng ƒë·∫∑c bi·ªát\n\n"
        "üîí *B·∫£o m·∫≠t:*\n"
        "T√¥i t√¥n tr·ªçng quy·ªÅn ri√™ng t∆∞ c·ªßa b·∫°n. Th√¥ng tin c√° nh√¢n s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ sau khi k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán.\n\n"
        "H√£y kh√°m ph√° th√™m v·ªÅ t√¥i qua c√°c li√™n k·∫øt d∆∞·ªõi ƒë√¢y:"
    )

    markup = InlineKeyboardMarkup()

    buttons = [
        ("üåê Github", "https://github.com/tanbaycu"),
        ("üìò Facebook", "https://facebook.com/tanbaycu.kaiser"),
        ("üìû Li√™n h·ªá h·ªó tr·ª£", "https://t.me/tanbaycu")
    ]

    for text, url in buttons:
        button = create_button(text, url)
        if button:
            markup.add(button)

    if not markup.keyboard:
        await bot.reply_to(message, "Xin l·ªói, hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin li√™n h·ªá n√†o kh·∫£ d·ª•ng.")
        return

    try:
        await bot.send_message(
            message.chat.id,
            info_text,
            reply_markup=markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending info message: {str(e)}")
        await bot.reply_to(message, "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi g·ª≠i th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i sau.")

@bot.message_handler(commands=['clear'])
async def clear_memory(message):
    user_id = message.from_user.id
    memory_handler = get_memory_handler(user_id)
    memory_handler.clear_memory()
    await bot.reply_to(message, "ƒê√£ x√≥a b·ªô nh·ªõ c·ªßa b·∫°n.")

async def main():
    logger.info("Bot ƒëang ch·∫°y v·ªõi m√¥ h√¨nh Gemini 2.0 v√† b·ªô nh·ªõ t·∫°m th·ªùi...")
    while True:
        try:
            await bot.polling(non_stop=True, timeout=60)
        except Exception as e:
            logger.error(f"L·ªói polling: {str(e)}")
            await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(main())

# For running in Google Colab, you might need to add these lines:
# from google.colab import output
# output.clear()
# !pip install pyTelegramBotAPI nest_asyncio
# !python telegram_bot.py